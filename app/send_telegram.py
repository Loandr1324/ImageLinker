import telepot
from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from config import TOKEN_BOT, CHAT_ID
from loguru import logger

TOKEN = TOKEN_BOT
CHAT_ID = CHAT_ID
telegramBot = telepot.Bot(token=TOKEN_BOT)


def create_message(data: dict) -> (str, InlineKeyboardMarkup):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param data: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏
    –ü—Ä–∏–º–µ—Ä:
    {
        'manager': '—Ç–µ—Å—Ç–ú',
        'client': '—Ç–µ—Å—Ç–ö',
        'car_model': 'CS55PLUS',
        'car_color': '–°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π',
        'year_prod': '2025',
        'profit_car_body': 1,
        'profit_add_equip': 2,
        'profit_credit': 3,
        'comp_suppl': 4,
        'trade_in': 'Y',
        'credit': 'Y',
        'kasko': 'Y',
        'date_issue': '—Å–µ–≥–æ–¥–Ω—è',
    }
    :return: tuple(
        —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π,
        —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ InlineKeyboardMarkup —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    data['profit'] = profit_calculation(data)
    text = generate_text_for_deal(data)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f"approve"),
         InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject")],
    ])
    return text, keyboard


def send_message(message: str, keyboard: InlineKeyboardMarkup | ReplyKeyboardMarkup) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Ç–µ–ª–µ–≥—Ä–∞–º
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param keyboard: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
    :return: bool - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        telegramBot.sendMessage(CHAT_ID, message, parse_mode="HTML", reply_markup=keyboard)
        return True
    except ConnectionError as ce:
        logger.error('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±—ã–ª–∞ –Ω–µ—É–¥–∞—á–Ω–∞. –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:')
        logger.error(ce)
        return False


def profit_calculation(data: dict) -> str:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –ø–æ —Å–¥–µ–ª–∫–µ
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏
        {'profit_car_body': str,
        'profit_add_equip': str,
        'profit_credit': str,
        'comp_suppl', str}
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—É—é –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º. –ù–∞–ø—Ä–∏–º–µ—Ä: "12 681 682"
    """
    profit_car_body = data.get('profit_car_body').replace(' ', '')
    profit_add_equip = data.get('profit_add_equip').replace(' ', '')
    profit_credit = data.get('profit_credit').replace(' ', '')
    comp_suppl = data.get('comp_suppl').replace(' ', '')
    profit = int(profit_car_body) + int(profit_add_equip) + int(profit_credit) + int(comp_suppl)
    return '{0:,}'.format(profit).replace(',', ' ')


def generate_text_for_deal(data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–¥–µ–ª–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
    :param data:
    :return: str - —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # return f"""üü° @Monareich, –ü—Ä–æ—Å—å–±–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å:  # TODO –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    return f"""üü° Monareich, –ü—Ä–æ—Å—å–±–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å:
    –ú–µ–Ω–µ–¥–∂–µ—Ä: {data.get('manager')}
    {data.get('client')}
    {data.get('car_model')}
    –¶–≤–µ—Ç: {data.get('car_color')}
    –ì–æ–¥: {data.get('year_prod')}
    –ñ: {data.get('profit_car_body')}
    –û: {data.get('profit_add_equip')}
    –ö: {data.get('profit_credit')}
    –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: {data.get('comp_suppl')}
    –¢—Ä–µ–π–¥-–∏–Ω: {data.get('trade_in')}
    –ö—Ä–µ–¥–∏—Ç: {data.get('credit')}
    –ö–ê–°–ö–û: {data.get('kasko')}
    –ò—Ç–æ–≥–æ = {data.get('profit')}
    –í—ã–¥–∞—á–∞: {data.get('date_issue')}
    """